import { cards } from '@utils/cards';
import { GamePlay } from '@utils/gameplay';
import { GameState } from '@utils/gamestate';
import {
    com, p, src,
    player1Window, player2Window,
    gameName,
    customAsserts
} from '@utils/util';

export const ExploitCases = {
    Malevolence_debuff_and_when_defeateds: async function () {
    //arrange
    const gameState = new GameState(gameName);
    await gameState.LoadGameStateLinesAsync();
    await gameState.ResetGameStateLines()
      .AddBase(1, cards.SOR.EchoBase)
      .AddLeader(1, cards.SOR.KrennicLeader)
      .AddBase(2, cards.SOR.EchoBase)
      .AddLeader(2, cards.SOR.SabineLeader)
      .FillResources(1, cards.SOR.BFMarine, 1)
      //TODO: add all these as refs on cards.*
      .AddCardToDeck(1, '9610332938 9133080458 8333567388 3680942691 9151673075 9610332938 1900571801 0345124206 8655450523 1039828081')
      .AddCardToHand(1, cards.TWI.Malevolence)
      .AddUnit(1, cards.TWI.WTTradeOfficial)
      .AddUnit(1, cards.SOR.InfernoFour)
      .AddUnit(1, cards.TWI.WTTradeOfficial)
      .AddUnit(1, cards.SHD.CobbVanth)
      .AddUnit(2, cards.TWI.Malevolence)
      .FlushAsync(com.BeginTestCallback)
    ;
    //act
    const gameplay = new GamePlay(browser);
    await gameplay
      .WaitForMyHand()
      .PlayFromHand(1).TargetMySpaceUnit(1).TargetMyGroundUnit(1).TargetMyGroundUnit(2).TargetMyGroundUnit(3)
      .Pass().ChooseButton(1, 1).ChooseButton(1, 2)
      .WaitForCheckboxes().Check(3).Submit()
      .TargetTheirSpaceUnit(1)
      .SwitchPlayerWindow()
      .RunAsync()
    ;

    //assert
    gameplay.Assert()
      .MySpaceUnitIsThere(1)
      .MySpaceUnitPieceEquals(1, 1, '3')
      .MySpaceUnitIsNotPlayable(1)
      .RunAsync()
    ;
  },
  Malevolence_unique: process.env.FULL_REGRESSION !== "true" ? '' : async function() {
    //arrange
    const gameState = new GameState(gameName);
    await gameState.LoadGameStateLinesAsync();
    await gameState.ResetGameStateLines()
      .AddBase(1, cards.SOR.EchoBase)
      .AddLeader(1, cards.SOR.KrennicLeader)
      .AddBase(2, cards.SOR.EchoBase)
      .AddLeader(2, cards.SOR.SabineLeader)
      .FillResources(1, cards.SOR.BFMarine, 5)
      .AddCardToHand(1, cards.TWI.Malevolence)
      .AddUnit(1, cards.TWI.BattleDroid)
      .AddUnit(1, cards.TWI.BattleDroid)
      .AddUnit(1, cards.TWI.Malevolence)
      .AddUnit(2, cards.TWI.Malevolence)
      .FlushAsync(com.BeginTestCallback)
    ;
    //act
    const gameplay = new GamePlay(browser);
    await gameplay
      .WaitForMyHand()
      .PlayFromHand(1).TargetMyGroundUnit(1).TargetMyGroundUnit(2).Pass()
      .TargetMySpaceUnit(2).TargetTheirSpaceUnit(1)
      .RunAsync()
    ;

    //assert
    gameplay.Assert()
      .TheirSpaceUnitIsThere(1).TheirSpaceUnitPieceEquals(1, 1, '3')
      .MySpaceUnitIsThere(1).MySpaceUnitIsNotExhausted(1)
      .RunAsync()
    ;
  },
  SLT_cant_be_used_first: process.env.FULL_REGRESSION !== "true" ? '' : async function () {
    //arrange
    const gameState = new GameState(gameName);
    await gameState.LoadGameStateLinesAsync();
    await gameState.ResetGameStateLines()
      .AddBase(1, cards.SOR.EchoBase)
      .AddLeader(1, cards.SOR.KrennicLeader)
      .AddBase(2, cards.SOR.EchoBase)
      .AddLeader(2, cards.SOR.SabineLeader)
      .FillResources(1, cards.SOR.BFMarine, 4)
      .AddCardToHand(1, cards.TWI.Malevolence)
      .AddUnit(1, cards.TWI.BattleDroid)
      .AddUnit(1, cards.SOR.SLT)
      .FlushAsync(com.BeginTestCallback)
    ;
    //act
    const gameplay = new GamePlay(browser);
    await gameplay.WaitForMyHand().RunAsync();
    //assert
    gameplay.Assert()
      .MyHandCardIsNotPlayable(1)
      .RunAsync()
    ;
  },
  SLT_Bounty_PunishingOne: process.env.FULL_REGRESSION !== "true" ? '' : async function() {
    //arrange
    const gameState = new GameState(gameName);
    await gameState.LoadGameStateLinesAsync();
    await gameState.ResetGameStateLines()
      .AddBase(1, cards.SOR.DagobahSwamp)
      .AddLeader(1, cards.SOR.SabineLeader)
      .AddBase(2, cards.SOR.KestroCity)
      .AddLeader(2, cards.SOR.KrennicLeader)
      .FillResources(1, cards.SOR.BFMarine, 5)
      .FillResources(2, cards.SOR.BFMarine, 4)
      .AddCardToHand(2, cards.TWI.DookuFallenJedi)
      .AddUnit(1, cards.SOR.LukeSkywalker)
      .AddUnit(1, cards.SOR.SLT)
      .AddUnit(1, cards.SHD.PunishingOne)
      .AddUnit(2, cards.TWI.Malevolence)
      .AddUnit(2, cards.SOR.SLT, false, false, 0,
        gameState.SubcardBuilder().AddUpgrade(cards.SHD.VambraceFlameThrower, 2).Build())
      .FlushAsync(com.BeginTestCallback)
    ;
    //act
    const gameplay = new GamePlay(browser);
    await gameplay
      .WaitForMySpaceUnit(1).ClickMySpaceUnit(1).TargetTheirBase()
      .SwitchPlayerWindow().PlayFromHand(1).TargetMyGroundUnit(1).TargetMySpaceUnit(1)
      .TargetTheirGroundUnit(2).TargetTheirGroundUnit(1).Pass()
      .SwitchPlayerWindow().ChooseYes()
      .RunAsync()
    ;
    //assert
    gameplay.Assert()
      .TheirGroundUnitIsThere(1)
      .TheirSpaceUnitIsGone(1)
      .MySpaceUnitIsNotExhausted(1)
      .MyResourcesEquals('6/6')
      .TheirResourcesEquals('1/5')
      .RunAsync()
    ;
  },
}